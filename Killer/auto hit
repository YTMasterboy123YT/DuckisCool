    local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

_G.teleportPlayersActive = false
_G.noKillList = {}
_G.autoHitActive = false

-- Function to show notifications (replace with your GUI logic)
local function showNotification(message)
    print(message) -- Placeholder for notifications
end

-- Function to teleport players
local function teleportPlayers()
    while _G.teleportPlayersActive do
        wait(0.1) -- Delay to reduce performance impact

        for _, otherPlayer in pairs(Players:GetPlayers()) do
            local targetCharacter = otherPlayer.Character

            if otherPlayer ~= LocalPlayer and not _G.noKillList[otherPlayer.Name] then
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    targetCharacter:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                end
            end
        end
    end
end

-- Function to start Auto Kill
local function startAutoKill()
    _G.teleportPlayersActive = true
    showNotification("Started teleporting and auto-hitting players.")

    teleportPlayers()

    -- Auto-hitting loop
    while _G.teleportPlayersActive do
        for _, otherPlayer in pairs(Players:GetPlayers()) do
            if otherPlayer ~= LocalPlayer and not _G.noKillList[otherPlayer.Name] then
                local targetCharacter = otherPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("Humanoid") then
                    targetCharacter.Humanoid:TakeDamage(10) -- Adjust damage as needed
                end
            end
        end
        wait(0.1) -- Adjust as needed
    end
end

-- Function to stop Auto Kill
local function stopAutoKill()
    _G.teleportPlayersActive = false
    showNotification("Stopped teleporting and auto-hitting players.")
end

-- GUI setup
local screenGui = Instance.new("ScreenGui", game.CoreGui)
local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 400)
mainFrame.Position = UDim2.new(0.5, -150, 0.5, -200)

-- Button to start/stop Auto Kill
local autoKillButton = Instance.new("TextButton", mainFrame)
autoKillButton.Size = UDim2.new(0, 200, 0, 50)
autoKillButton.Position = UDim2.new(0.5, -100, 0, 20)
autoKillButton.Text = "Toggle Auto Kill"

autoKillButton.MouseButton1Click:Connect(function()
    if _G.teleportPlayersActive then
        stopAutoKill()
    else
        startAutoKill()
    end
end)

-- Button for Auto Hit
local autoHitButton = Instance.new("TextButton", mainFrame)
autoHitButton.Size = UDim2.new(0, 200, 0, 50)
autoHitButton.Position = UDim2.new(0.5, -100, 0, 80)
autoHitButton.Text = "Toggle Auto Hit"

autoHitButton.MouseButton1Click:Connect(function()
    _G.autoHitActive = not _G.autoHitActive
    showNotification(_G.autoHitActive and "Auto Hit is ON." or "Auto Hit is OFF.")
end)

-- Create buttons for all players
local function createPlayerButtons()
    local yOffset = 150 -- Starting position for player buttons
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerButton = Instance.new("TextButton", mainFrame)
            playerButton.Size = UDim2.new(0, 200, 0, 30)
            playerButton.Position = UDim2.new(0.5, -100, 0, yOffset)
            playerButton.Text = player.Name
            playerButton.BackgroundColor3 = Color3.new(1, 1, 1) -- Default color

            playerButton.MouseButton1Click:Connect(function()
                if _G.noKillList[player.Name] then
                    _G.noKillList[player.Name] = nil -- Remove from no-kill list
                    playerButton.BackgroundColor3 = Color3.new(1, 1, 1) -- Reset color
                    showNotification(player.Name .. " removed from No Kill list.")
                else
                    _G.noKillList[player.Name] = true -- Add to no-kill list
                    playerButton.BackgroundColor3 = Color3.new(1, 0, 0) -- Change color to indicate selection
                    showNotification(player.Name .. " added to No Kill list.")
                end
            end)

            yOffset = yOffset + 35 -- Increment for the next button
        end
    end
end

-- Call the function to create player buttons
createPlayerButtons()

-- Ensure the UI updates when players join or leave
Players.PlayerAdded:Connect(function(newPlayer)
    createPlayerButtons() -- Re-create buttons when a new player joins
end)

Players.PlayerRemoving:Connect(function(removedPlayer)
    -- Optionally, update buttons when a player leaves
end)

print("Script Loaded. Use the buttons to manage player interactions.")
