
-- Define services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ScreenGui = Instance.new("ScreenGui")
local Notification = Instance.new("TextLabel")

-- Global variables for toggle state and no-kill list
_G.teleportPlayersActive = false
_G.noKillList = {}
_G.killList = {}

-- Function to create and display notification
local function showNotification(message)
    Notification.Text = message
    Notification.Size = UDim2.new(0.3, 0, 0.1, 0)
    Notification.Position = UDim2.new(0.5, -75, 0.1, 0)
    Notification.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Notification.TextColor3 = Color3.fromRGB(255, 255, 255)
    Notification.TextScaled = true
    Notification.Parent = ScreenGui

    ScreenGui.Parent = game.CoreGui

    -- Fade out effect
    for i = 1, 10 do
        wait(0.1)
        Notification.TextTransparency = i / 10
    end

    -- Remove notification after fading out
    ScreenGui:Destroy()
end

-- Function to continuously teleport player characters
local function teleportPlayers()
    while _G.teleportPlayersActive do
        wait(0.1) -- Delay to reduce performance impact

        -- Iterate through other players
        for _, otherPlayer in pairs(Players:GetPlayers()) do
            local targetCharacter = otherPlayer.Character

            if otherPlayer ~= LocalPlayer then
                if _G.noKillList[otherPlayer.Name] then
                    continue -- Skip players in the no-kill list
                end
                
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    -- Teleport all other players not in the no-kill list
                    targetCharacter:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                end
            end
        end
    end
end

-- Function to bring specified user's parts continuously
local function bringUserParts(user)
    while _G.killList[user] do
        wait(0.1) -- Delay to reduce performance impact
        local targetPlayer = Players:FindFirstChild(user)

        if targetPlayer and targetPlayer.Character then
            for _, part in pairs(targetPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0) -- Bring parts above the local player
                end
            end
        else
            _G.killList[user] = nil -- Remove from kill list if the player is not found
            break
        end
    end
end

-- Chat command to toggle player teleportation and manage no-kill and kill lists
LocalPlayer.Chatted:Connect(function(message)
    local args = message:split(" ")

    if args[1]:lower() == "on" then
        _G.teleportPlayersActive = true
        teleportPlayers() -- Start teleporting players
        showNotification("Started teleporting players.")
    elseif args[1]:lower() == "off" then
        _G.teleportPlayersActive = false -- Stop teleporting players
        showNotification("Stopped teleporting players.")
    elseif args[1]:lower() == ";nokill" then
        for i = 2, #args do
            local user = args[i]
            if not _G.noKillList[user] then
                _G.noKillList[user] = true -- Add each user to no-kill list
            end
        end
        showNotification("Added to no-kill list: " .. table.concat(args, ", ", 2))
    elseif args[1]:lower() == ";kill" and args[2] then
        local targetUser = args[2]
        _G.killList[targetUser] = true -- Add user to kill list
        showNotification("Started bringing " .. targetUser .. "'s parts to you.")
        bringUserParts(targetUser) -- Start bringing their parts continuously
    elseif args[1]:lower() == ";stopkill" and args[2] then
        local targetUser = args[2]
        _G.killList[targetUser] = nil -- Remove the user from the kill list
        showNotification("Stopped bringing " .. targetUser .. "'s parts.")
    end
end)

print("Type 'on' to start teleporting players, 'off' to stop.")
print("Type ';NoKill (User1) (User2)...' to add multiple users to the no-kill list.")
print("Type ';Kill (User)' to bring a user's parts to you continuously.")
print("Type ';StopKill (User)' to stop bringing a user's parts.")
