local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local backpack = LocalPlayer:WaitForChild("Backpack")
local UserInputService = game:GetService("UserInputService")

-- Create GUI Window
local Window = Fluent:CreateWindow({
    Title = "Speed Hub X " .. Fluent.Version, 
    SubTitle = "By Duck", 
    TabWidth = 160,
    Size = UDim2.fromOffset(560, 440),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
}

-- Main Tab: Gravity and Jump Power
Tabs.Main:AddInput("Gravity", {
    Title = "Set Gravity",
    Default = "196.2",
    Placeholder = "Enter Gravity",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local gravityValue = tonumber(value)
        if gravityValue then
            workspace.Gravity = gravityValue
            print("Gravity set to:", gravityValue)
        else
            print("Invalid Gravity Value")
        end
    end
})

Tabs.Main:AddInput("Jump Power", {
    Title = "Set Jump Power",
    Default = "50",
    Placeholder = "Enter Jump Power",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local jumpPowerValue = tonumber(value)
        if jumpPowerValue then
            for _, player in ipairs(Players:GetPlayers()) do
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.JumpPower = jumpPowerValue
                    end
                end
            end
            print("Jump Power set to:", jumpPowerValue)
        else
            print("Invalid Jump Power Value")
        end
    end
})

-- Toggle for Infinite Jump
local infiniteJumpToggle = Tabs.Main:AddToggle("Infinite Jump", { Title = "Enable Infinite Jump", Default = false })
infiniteJumpToggle:OnChanged(function(state)
    if state then
        UserInputService.JumpRequest:Connect(function()
            LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end)
    end
end)

-- NoClip Functionality
local noclipToggle = Tabs.Main:AddToggle("NoClip", { Title = "Enable NoClip", Default = false })
noclipToggle:OnChanged(function(state)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if state then
        while noclipToggle.Value do
            wait()
            humanoidRootPart.CanCollide = false
        end
    else
        humanoidRootPart.CanCollide = true
    end
end)

-- Killer Tab: Auto Hit and Tool Attributes
_G.autoHitActive = false

local function autoHit()
    while _G.autoHitActive do
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
        wait(0.1)
    end
end

local autoHitToggle = Tabs.Killer:AddToggle("Auto Hit", { Title = "Enable Auto Hit", Default = false })
autoHitToggle:OnChanged(function(state)
    _G.autoHitActive = state
    if state then
        spawn(autoHit)
    end
end)

-- Function to set tool attributes
local function setToolAttributes(toolName, attributeType, value)
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        tool[attributeType].Value = value
    end
end

-- Input fields for tool attributes
local function createToolInput(toolName, attributeType)
    Tabs.Killer:AddInput(toolName .. " " .. attributeType, {
        Title = toolName .. " " .. attributeType,
        Default = "0.1", -- Default value
        Placeholder = "Enter value for " .. toolName,
        Numeric = true,
        Finished = true,
        Callback = function(value)
            local numericValue = tonumber(value)
            if numericValue then
                setToolAttributes(toolName, attributeType, numericValue)
                print(toolName .. " " .. attributeType .. " set to " .. numericValue)
            else
                print("Invalid value for " .. toolName .. " " .. attributeType)
            end
        end
    })
end

-- Create inputs for each tool
local toolsToSet = {
    {"Punch", "attackTime"},
    {"Ground Slam", "attackTime"},
    {"Stomp", "attackTime"},
    {"Handstands", "repTime"},
    {"Pushups", "repTime"},
    {"Weight", "repTime"},
    {"Situps", "repTime"}
}

for _, tool in ipairs(toolsToSet) do
    createToolInput(tool[1], tool[2])
end

-- Initialize Notifications
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load autoload config
SaveManager:LoadAutoloadConfig()
