local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

-- Remotes
local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Speed Hub X " .. Fluent.Version, 
    SubTitle = "By Duck", 
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
}

-- Input for Size
Tabs.Main:AddInput("Size", {
    Title = "Size",
    Description = "Set Size",
    Default = "1",
    Placeholder = "Enter Size",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local sizeValue = tonumber(Value)
        if sizeValue then
            changeSizeSpeedRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

-- Input for Speed
Tabs.Main:AddInput("Speed", {
    Title = "Speed",
    Description = "Set Speed",
    Default = "16",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local speedValue = tonumber(Value)
        if speedValue then
            changeSizeSpeedRemote:InvokeServer("changeSpeed", speedValue)
        end
    end
})

-- Toggle for Infinite Jump
local infiniteJumpEnabled = false

local InfiniteJumpToggle = Tabs.Main:AddToggle("InfiniteJump", {
    Title = "Infinite Jump",
    Default = false,
})

InfiniteJumpToggle:OnChanged(function(value)
    infiniteJumpEnabled = value
    local function enableInfiniteJump()
        if infiniteJumpEnabled then
            UserInputService.JumpRequest:Connect(function()
                if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                    player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        end
    end
    enableInfiniteJump()
end)

-- Button for FPS Booster
Tabs.Main:AddButton({
    Title = "FPS BOOSTER",
    Description = "Boosts FPS",
    Callback = function()
        local UserSettings = UserSettings():GetService("UserGameSettings")
        UserSettings.GraphicsQuality = 1
        UserSettings:SetThirdPartyGraphicsQuality(1)
    end
})

-- Anti AFK Toggle
local antiAFKEnabled = false

local AntiAFKToggle = Tabs.Main:AddToggle("Anti AFK", {
    Title = "Anti AFK",
    Default = false,
})

AntiAFKToggle:OnChanged(function(value)
    antiAFKEnabled = value
    while antiAFKEnabled do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end)

-- Position Lock Toggle
local lockPositionEnabled = false
local lockedPosition

local LockPositionToggle = Tabs.Main:AddToggle("Lock Position", {
    Title = "Lock Position",
    Default = false,
})

LockPositionToggle:OnChanged(function(value)
    lockPositionEnabled = value
    if lockPositionEnabled then
        local character = player.Character or player.CharacterAdded:Wait()
        lockedPosition = character.HumanoidRootPart.Position

        while lockPositionEnabled do
            character.HumanoidRootPart.CFrame = CFrame.new(lockedPosition)
            wait(0.1)
        end
    end
end)

-- Setup SaveManager and InterfaceManager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Notifications
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load autoload config
SaveManager:LoadAutoloadConfig()
