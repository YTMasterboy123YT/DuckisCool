local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Window = Fluent:CreateWindow({
    Title = "Speed Hub X " .. Fluent.Version,
    SubTitle = "By Duck",
    TabWidth = 160,
    Size = UDim2.fromOffset(560, 440),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    TOOLSpeed = Window:AddTab({ Title = "TOOLSpeed", Icon = "" }),
}

-- Main Tab Inputs
Tabs.Main:AddInput("Size", {
    Title = "Set Size",
    Default = "1",
    Placeholder = "Enter Size",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local sizeValue = tonumber(Value)
        if sizeValue then
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

Tabs.Main:AddInput("Speed", {
    Title = "Set Speed",
    Default = "16",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local speedValue = tonumber(Value)
        if speedValue then
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSpeed", speedValue)
        end
    end
})

-- Daylight System Dropdown
Tabs.Main:AddDropdown("DaylightSystem", {
    Title = "Daylight System",
    Description = "Select the time of day",
    Values = {"Noon", "Evening", "Night", "Dawn"},
    Multi = false,
    Default = 1,
    Callback = function(selected)
        if selected == "Noon" then
            game.Lighting.TimeOfDay = "12:00:00"
        elseif selected == "Evening" then
            game.Lighting.TimeOfDay = "18:00:00"
        elseif selected == "Night" then
            game.Lighting.TimeOfDay = "00:00:00"
        elseif selected == "Dawn" then
            game.Lighting.TimeOfDay = "06:00:00"
        end
    end
})

-- Killer Tab (Auto Hit)
local autoHitActive = false

local function autoHit()
    while autoHitActive do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Enabled then
            equippedTool:Activate()
        end
        wait(0.1)
    end
end

Tabs.Killer:AddToggle("Auto Hit", {
    Title = "Enable Auto Hit",
    Default = false,
    Callback = function(State)
        autoHitActive = State
        if State then
            autoHit()
        end
    end
})

-- TOOLSpeed Tab
local tools = {
    {name = "Punch", type = "attackTime"},
    {name = "Ground Slam", type = "attackTime"},
    {name = "Stomp", type = "attackTime"},
    {name = "Handstands", type = "repTime"},
    {name = "Pushups", type = "repTime"},
    {name = "Weight", type = "repTime"},
    {name = "Situps", type = "repTime"}
}

local function setToolProperties(name, value)
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local tool = backpack:FindFirstChild(name)
    if tool then
        local cooldown = tool:FindFirstChild(tools[name].type)
        if cooldown and cooldown:IsA("NumberValue") then
            cooldown.Value = value
        end
    end
end

for _, toolInfo in pairs(tools) do
    Tabs.TOOLSpeed:AddInput(toolInfo.name .. " Speed", {
        Title = toolInfo.name .. " Speed",
        Description = "Set the speed for " .. toolInfo.name,
        Default = "0.1",
        Placeholder = "Enter Speed",
        Numeric = true,
        Finished = true,
        Callback = function(Value)
            local speedValue = tonumber(Value)
            if speedValue then
                setToolProperties(toolInfo.name, speedValue)
            end
        end
    })

    setToolProperties(toolInfo.name, 0.1)
end

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:LoadAutoloadConfig()
