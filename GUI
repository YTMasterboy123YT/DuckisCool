local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local backpack = LocalPlayer:WaitForChild("Backpack")

local Window = Fluent:CreateWindow({
    Title = "Speed Hub X " .. Fluent.Version,
    SubTitle = "By Duck",
    TabWidth = 160,
    Size = UDim2.fromOffset(560, 440),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    Miscs = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- Main Tab: Set Size and Speed
Tabs.Main:AddInput("SetSize", {
    Title = "Set Size",
    Default = "1",
    Placeholder = "Enter Size",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local sizeValue = tonumber(Value)
        if sizeValue then
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

Tabs.Main:AddInput("SetSpeed", {
    Title = "Set Speed",
    Default = "16",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local speedValue = tonumber(Value)
        if speedValue then
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSpeed", speedValue)
        end
    end
})

-- Anti AFK
local function antiAFK()
    while true do
        LocalPlayer.Idled:Wait()
        LocalPlayer:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end

Tabs.Main:AddToggle("AntiAFK", {
    Title = "Anti AFK",
    Default = false,
    Callback = function(state)
        if state then
            antiAFK()
        end
    end
})

-- Infinite Jump
local infiniteJumpActive = false
local function enableInfiniteJump()
    infiniteJumpActive = true
    UserInputService.JumpRequest:Connect(function()
        if infiniteJumpActive then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
end

Tabs.Main:AddToggle("InfiniteJump", {
    Title = "Infinite Jump",
    Default = false,
    Callback = function(state)
        infiniteJumpActive = state
        if state then
            enableInfiniteJump()
        end
    end
})

-- Gravity Changer
Tabs.Main:AddInput("SetGravity", {
    Title = "Set Gravity",
    Default = "196.2",
    Placeholder = "Enter Gravity",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local gravityValue = tonumber(Value)
        if gravityValue then
            workspace.Gravity = gravityValue
        end
    end
})

-- Lock Position
local lockPositionActive = false
local function lockPosition()
    while lockPositionActive do
        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
        wait(0.1)
    end
end

Tabs.Main:AddToggle("LockPosition", {
    Title = "Lock Position",
    Default = false,
    Callback = function(state)
        lockPositionActive = state
        if state then
            lockPosition()
        end
    end
})

-- No Clip
local noClipActive = false
local function toggleNoClip()
    noClipActive = not noClipActive
    LocalPlayer.Character.Humanoid:ChangeState(noClipActive and Enum.HumanoidStateType.Physics or Enum.HumanoidStateType.GettingUp)
end

Tabs.Main:AddToggle("NoClip", {
    Title = "No Clip",
    Default = false,
    Callback = function(state)
        noClipActive = state
        toggleNoClip()
    end
})

-- Killer Tab: Auto Hit
_G.autoHitActive = false

local function autoHit()
    while _G.autoHitActive do
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
        wait(0.1)
    end
end

Tabs.Killer:AddToggle("AutoHit", {
    Title = "Auto Hit",
    Default = false,
    Callback = function(state)
        _G.autoHitActive = state
        if state then
            spawn(autoHit)
        end
    end
})

-- Misc Tab: Tool Attribute Inputs
local toolsToSet = {
    {"Punch", "attackTime", 0.1},
    {"Ground Slam", "attackTime", 0.1},
    {"Stomp", "attackTime", 0.1},
    {"Handstands", "repTime", 0.1},
    {"Pushups", "repTime", 0.1},
    {"Weight", "repTime", 0.1},
    {"Situps", "repTime", 0.1}
}

for _, tool in ipairs(toolsToSet) do
    Tabs.Miscs:AddInput(tool[1] .. " Attribute", {
        Title = tool[1] .. " " .. tool[2],
        Default = tostring(tool[3]),
        Placeholder = "Enter Value",
        Numeric = true,
        Finished = true,
        Callback = function(Value)
            local newValue = tonumber(Value)
            if newValue then
                local tool = backpack:FindFirstChild(tool[1])
                if tool then
                    tool[tool[2]].Value = newValue
                end
            end
        end
    })
end

-- Setup SaveManager and InterfaceManager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

Fluent:Notify({
    Title = "Speed Hub X",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load autoload config
SaveManager:LoadAutoloadConfig()
