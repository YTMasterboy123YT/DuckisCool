local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({
    Name = "Player Management Script", 
    HidePremium = false, 
    SaveConfig = true, 
    ConfigFolder = "PlayerManagement",
    IntroEnabled = true,
    IntroText = "Welcome to Player Management Script!", 
    IntroIcon = "https://i.imgur.com/dWXaDfO.jpg"
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local _G = getfenv(0) -- Global table for storing state

-- Global variables for toggle state and lists
_G.teleportPlayersActive = false
_G.noKillList = {}
_G.killList = {}

-- Function to show notifications
local function showNotification(message)
    OrionLib:MakeNotification({
        Name = "Notification",
        Content = message,
        Duration = 5,
    })
end

-- Function to continuously teleport player characters
local function teleportPlayers()
    while _G.teleportPlayersActive do
        wait(0.1)

        for _, otherPlayer in pairs(Players:GetPlayers()) do
            if otherPlayer ~= LocalPlayer and not _G.noKillList[otherPlayer.Name] then
                local targetCharacter = otherPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    targetCharacter:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                end
            end
        end
    end
end

-- Function to bring specified user's parts continuously
local function bringUserParts(user)
    while _G.killList[user] do
        wait(0.1)
        local targetPlayer = Players:FindFirstChild(user)

        if targetPlayer and targetPlayer.Character then
            for _, part in pairs(targetPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
                end
            end
        else
            _G.killList[user] = nil
            break
        end
    end
end

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main Tab",
    Icon = "rbxassetid://132359476107633",
    PremiumOnly = false
})

-- Toggle to start/stop teleporting players
MainTab:AddToggle({
    Name = "Teleport Players",
    Default = false,
    Callback = function(Value)
        _G.teleportPlayersActive = Value
        if Value then
            teleportPlayers() -- Start teleporting players
            showNotification("Started teleporting players.")
        else
            showNotification("Stopped teleporting players.")
        end
    end
})

-- Speed changer
MainTab:AddTextbox({
    Name = "Speed Changer",
    Default = "16",
    TextDisappear = true,
    Callback = function(Value)
        local speedValue = tonumber(Value) or 16
        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = speedValue
                end
            end
        end
    end
})

-- Jump changer
MainTab:AddTextbox({
    Name = "Jump Changer",
    Default = "50",
    TextDisappear = true,
    Callback = function(Value)
        local jumpPowerValue = tonumber(Value) or 50
        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpPower = jumpPowerValue
                end
            end
        end
    end
})

-- Killer Tab
local KillerTab = Window:MakeTab({
    Name = "Killer Tab",
    Icon = "rbxassetid://132359476107633",
    PremiumOnly = false
})

-- Auto Hit Toggle
KillerTab:AddToggle({
    Name = "Auto Hit",
    Default = false,
    Callback = function(Value)
        _G.autoHitActive = Value
        if Value then
            showNotification("Auto Hit Enabled.")
            while _G.autoHitActive do
                for _, otherPlayer in pairs(Players:GetPlayers()) do
                    if otherPlayer ~= LocalPlayer and not _G.noKillList[otherPlayer.Name] then
                        local targetCharacter = otherPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("Humanoid") then
                            targetCharacter.Humanoid:TakeDamage(10) -- Adjust damage as needed
                        end
                    end
                end
                wait(0.1)
            end
        else
            showNotification("Auto Hit Disabled.")
        end
    end
})

-- Players Tab
local PlayersTab = Window:MakeTab({
    Name = "Players Tab",
    Icon = "rbxassetid://132359476107633",
    PremiumOnly = false
})

-- Function to update player buttons
local function updatePlayerButtons()
    PlayersTab:Clear() -- Clear previous buttons

    for _, player in ipairs(Players:GetPlayers()) do
        PlayersTab:AddToggle({
            Name = player.Name,
            Default = _G.noKillList[player.Name] or false,
            Callback = function(Value)
                if Value then
                    _G.noKillList[player.Name] = true
                    showNotification(player.Name .. " added to no-kill list.")
                else
                    _G.noKillList[player.Name] = nil
                    showNotification(player.Name .. " removed from no-kill list.")
                end
            end
        })
    end
end

-- Update player buttons on initialization
updatePlayerButtons()

-- Connect player events to update buttons
Players.PlayerAdded:Connect(function()
    updatePlayerButtons()
end)

Players.PlayerRemoving:Connect(function()
    updatePlayerButtons()
end)

-- Button to clear no-kill list
KillerTab:AddButton({
    Name = "Clear No-Kill List",
    Callback = function()
        _G.noKillList = {}
        showNotification("Cleared no-kill list.")
        updatePlayerButtons() -- Update buttons after clearing
    end
})

print("Script Loaded. Use the tabs to manage game settings and player interactions.")
