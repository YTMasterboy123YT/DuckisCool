local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Window = Fluent:CreateWindow({
    Title = "Speed Hub X " .. Fluent.Version,
    SubTitle = "By Duck",
    TabWidth = 160,
    Size = UDim2.fromOffset(560, 440),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    TOOLSpeed = Window:AddTab({ Title = "TOOLSpeed", Icon = "" }),
}

-- Main Tab Inputs
local SizeInput = Tabs.Main:AddInput("Size", {
    Title = "Set Size",
    Description = "Set Size",
    Default = "1",
    Placeholder = "Enter Size",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local sizeValue = tonumber(Value)
        if sizeValue then
            ReplicatedStorage.rEvents.changeSizeSpeedRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

local SpeedInput = Tabs.Main:AddInput("Speed", {
    Title = "Set Speed",
    Description = "Set Speed",
    Default = "16",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local speedValue = tonumber(Value)
        if speedValue then
            ReplicatedStorage.rEvents.changeSizeSpeedRemote:InvokeServer("changeSpeed", speedValue)
        end
    end
})

-- Killer Tab
local autoHitActive = false

local function setToolProperties()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local tools = {
        {name = "Punch", type = "attackTime"},
        {name = "Ground Slam", type = "attackTime"},
        {name = "Stomp", type = "attackTime"},
        {name = "Handstands", type = "repTime"},
        {name = "Pushups", type = "repTime"},
        {name = "Weight", type = "repTime"},
        {name = "Situps", type = "repTime"}
    }

    for _, toolInfo in pairs(tools) do
        local tool = backpack:FindFirstChild(toolInfo.name)
        if tool then
            local cooldown = tool:FindFirstChild(toolInfo.type)
            if cooldown and cooldown:IsA("NumberValue") then
                cooldown.Value = 0.1
            end
        end
    end
end

local function autoHit()
    while autoHitActive do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Enabled then
            equippedTool:Activate()
        end
        wait(0.1)
    end
end

Tabs.Killer:AddToggle("Auto Hit", {
    Title = "Enable Auto Hit",
    Default = false,
    Callback = function(State)
        autoHitActive = State
        if State then
            setToolProperties()
            autoHit()
        end
    end
})

-- Misc Tab
local function antiAFK()
    while true do
        LocalPlayer.Idled:Wait()
        LocalPlayer:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end

local lockedPosition = LocalPlayer.Character.HumanoidRootPart.Position

local function lockPosition()
    while true do
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(lockedPosition)
        end
        wait(0.1)
    end
end

Tabs.Misc:AddToggle("Anti AFK", {
    Title = "Enable Anti AFK",
    Default = false,
    Callback = function(State)
        if State then
            antiAFK()
        end
    end
})

Tabs.Misc:AddToggle("Lock Position", {
    Title = "Enable Lock Position",
    Default = false,
    Callback = function(State)
        if State then
            lockPosition()
        end
    end
})

-- TOOLSpeed Tab
local toolsToSet = {
    {"Punch", "attackTime"},
    {"Ground Slam", "attackTime"},
    {"Stomp", "attackTime"},
    {"Handstands", "repTime"},
    {"Pushups", "repTime"},
    {"Weight", "repTime"},
    {"Situps", "repTime"}
}

for _, toolInfo in ipairs(toolsToSet) do
    Tabs.TOOLSpeed:AddInput(toolInfo[1] .. " Cooldown", {
        Title = toolInfo[1],
        Description = "Set " .. toolInfo[1] .. " cooldown",
        Default = "0.1",
        Placeholder = "Enter cooldown",
        Numeric = true,
        Finished = true,
        Callback = function(Value)
            local cooldownValue = tonumber(Value)
            if cooldownValue then
                local backpack = LocalPlayer:WaitForChild("Backpack")
                local tool = backpack:FindFirstChild(toolInfo[1])
                if tool then
                    local cooldown = tool:FindFirstChild(toolInfo[2])
                    if cooldown and cooldown:IsA("NumberValue") then
                        cooldown.Value = cooldownValue
                    end
                end
            end
        end
    })
end

-- Setup SaveManager and InterfaceManager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load autoload config
SaveManager:LoadAutoloadConfig()
