-- Ensure this script runs in a LocalScript
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))() -- Load Orion library

-- Global variables
_G.noKillList = {}
local punching = false
local hitSpeed = 0.1 -- Default hit speed

-- Create the Orion window
local Window = OrionLib:MakeWindow({
    Name = "Your Game Name",
    Icon = "rbxassetid://95093869224117",
    HidePremium = false,
})

-- Function to show notifications
local function showNotification(message)
    OrionLib:MakeNotification({
        Name = "Notification",
        Content = message,
        Time = 5,
    })
end

-- Auto hit functionality
local function setToolCooldowns()
    local tool = LocalPlayer.Backpack:FindFirstChild("Punch") or LocalPlayer.Character:FindFirstChild("Punch")
    if tool and tool:FindFirstChild("attackTime") then
        tool.attackTime.Value = hitSpeed
    end
end

local function autoUseTool()
    setToolCooldowns()
    while punching do
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local tool = LocalPlayer.Backpack:FindFirstChild("Punch") or character:FindFirstChild("Punch")

        if tool then
            if tool.Parent ~= character then
                humanoid:EquipTool(tool)
            end
            tool:Activate()
            wait(hitSpeed) -- Use hitSpeed for the delay
        else
            wait(0.5)
        end
    end
end

local function toggleAutoPunch(value)
    punching = value
    if punching then
        print("Auto-punching started.")
        autoUseTool()
    else
        print("Auto-punching stopped.")
    end
end

-- Lighting settings for time of day
local function setLighting(timeOfDay)
    if timeOfDay == "morning" then
        Lighting.Brightness = 2
        Lighting.ColorShift_Tint = Color3.fromRGB(255, 200, 150)
        Lighting.OutdoorAmbient = Color3.fromRGB(200, 200, 255)
    elseif timeOfDay == "afternoon" then
        Lighting.Brightness = 3
        Lighting.ColorShift_Tint = Color3.fromRGB(255, 255, 255)
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
    elseif timeOfDay == "night" then
        Lighting.Brightness = 0.5
        Lighting.ColorShift_Tint = Color3.fromRGB(50, 50, 100)
        Lighting.OutdoorAmbient = Color3.fromRGB(20, 20, 40)
    end
end

-- Function to enable no-clip
local function setNoClip(character, value)
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not value
        end
    end
end

local function toggleNoClip(value)
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            setNoClip(character, value) -- Enable or disable no-clip
        end
    end
end

-- Function to enable infinite jump
local function enableInfiniteJump()
    UserInputService.JumpRequest:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
    showNotification("Infinite Jump Enabled")
end

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://95093869224117",
    PremiumOnly = false,
})

MainTab:AddTextbox({
    Name = "Walk Speed",
    Default = "16",
    TextDisappear = true,
    Callback = function(Value)
        local speed = tonumber(Value) or 16
        LocalPlayer.Character.Humanoid.WalkSpeed = speed
    end    
})

MainTab:AddTextbox({
    Name = "Jump Power",
    Default = "50",
    TextDisappear = true,
    Callback = function(Value)
        local jumpPower = tonumber(Value) or 50
        LocalPlayer.Character.Humanoid.JumpPower = jumpPower
    end    
})

MainTab:AddTextbox({
    Name = "Gravity",
    Default = "196.2",
    TextDisappear = true,
    Callback = function(Value)
        local gravity = tonumber(Value) or 196.2
        workspace.Gravity = gravity
    end    
})

-- Time Dropdown
MainTab:AddDropdown({
    Name = "Time of Day",
    Options = {"morning", "afternoon", "night"},
    CurrentOption = "morning",
    Callback = function(Selected)
        setLighting(Selected)
        showNotification("Time set to: " .. Selected)
    end,
})

-- No-Clip Dropdown
MainTab:AddDropdown({
    Name = "Toggle No-Clip",
    Options = {"Enable", "Disable"},
    CurrentOption = "Disable",
    Callback = function(Selected)
        if Selected == "Enable" then
            toggleNoClip(true)
            showNotification("No-Clip Enabled")
        elseif Selected == "Disable" then
            toggleNoClip(false)
            showNotification("No-Clip Disabled")
        end
    end,
})

-- Infinite Jump Button
MainTab:AddButton({
    Name = "Enable Infinite Jump",
    Callback = function()
        enableInfiniteJump()
    end,
})

-- Auto Farm Tab
local AutoFarmTab = Window:MakeTab({
    Name = "Auto Farm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false,
})

AutoFarmTab:AddDropdown({
    Name = "Select Rock",
    Options = {"Muscle King Mountain", "Frozen Rock", "Rock Of Legends"},
    CurrentOption = "Muscle King Mountain",
    Callback = function(Selected)
        -- Your logic for teleporting the selected rock
        -- Implement teleport logic here based on the selected rock
    end,
})

-- Killer Tab
local KillerTab = Window:MakeTab({
    Name = "Killer",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false,
})

KillerTab:AddToggle({
    Name = "Auto Hit",
    Default = false,
    Callback = function(Value)
        toggleAutoPunch(Value)
    end,
})

KillerTab:AddTextbox({
    Name = "Hit Speed",
    Default = "0.1",
    TextDisappear = true,
    Callback = function(Value)
        hitSpeed = tonumber(Value) or hitSpeed
    end,
})

-- Final setup for GUI
Window:Init()
