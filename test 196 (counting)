local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the main window
local Window = Fluent:CreateWindow({
    Title = "Ducks Private Script" .. Fluent.Version, 
    SubTitle = "by Duck", 
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    settings = Window:AddTab({ Title = "Settings", Icon = "settings" })  -- Added settings tab
}

-- Save and Interface Managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Build Settings Section
InterfaceManager:BuildInterfaceSection(Tabs.settings)
SaveManager:BuildConfigSection(Tabs.settings)

-- Local player and character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Speed Input
Tabs.Main:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            character.Humanoid.WalkSpeed = speedValue
            print("Speed changed to:", speedValue)
        else
            print("Invalid speed value.")
        end
    end
})

-- Size Input
Tabs.Main:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local changeSizeRemote = ReplicatedStorage:WaitForChild("rEvents"):WaitForChild("changeSpeedSizeRemote")
            changeSizeRemote:InvokeServer("changeSize", sizeValue)
            print("Size changed to:", sizeValue)
        else
            print("Invalid size value.")
        end
    end
})

-- Jump Power Input
Tabs.Main:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        local jumpPowerValue = tonumber(value)
        if jumpPowerValue then
            for _, player in ipairs(game.Players:GetPlayers()) do
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.JumpPower = jumpPowerValue
                    end
                end
            end
            print("Jump power changed to:", jumpPowerValue)
        else
            print("Invalid jump power value.")
        end
    end
})

-- Notify that the GUI has been loaded
Fluent:Notify({
    Title = "Fluent",
    Content = "The GUI has been loaded successfully.",
    Duration = 5
})
