local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the main window
local Window = Fluent:CreateWindow({
    Title = "Ducks Private Script" .. Fluent.Version, 
    SubTitle = "by Duck", 
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Save and Interface Managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Build Settings Section
InterfaceManager:BuildInterfaceSection(Tabs.settings)
SaveManager:BuildConfigSection(Tabs.settings)

-- Local player
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Define rock positions and orientations
local rocks = {
    MythicalRock = {
        position = Vector3.new(2220.0595703125, 7.321215629577637, 1228.5823974609375),
        orientation = CFrame.Angles(0, math.rad(90), 0)
    },
    LegendRock = {
        position = Vector3.new(4187.1787109375, 991.5241088867188, -4065.08251953125),
        orientation = CFrame.Angles(0, math.rad(90), 0)
    },
    MuscleKingMountain = {
        position = Vector3.new(-8976.455078125, 9.191204071044922, -6130.7373046875),
        orientation = CFrame.Angles(0, math.rad(180), 0)
    }
}

-- Function to teleport to a rock
local function teleportToRock(rock)
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = CFrame.new(rock.position) * rock.orientation
    end
end

-- Function to continuously teleport to a rock when the toggle is enabled
local function startTeleporting(rock)
    while Tabs.AutoFarm:FindToggle(rock.toggleName).Value do
        teleportToRock(rock)
        wait(0.1)  -- Adjust the wait time as needed
    end
end

-- Auto Farm Toggles in Auto Farm Tab
Tabs.AutoFarm:AddToggle("MuscleKingToggle", {
    Title = "Enable Muscle King Auto Farm", 
    Default = false,
    Callback = function(state)
        if state then
            print("Muscle King Auto Farm enabled")
            startTeleporting({
                position = rocks.MuscleKingMountain.position,
                orientation = rocks.MuscleKingMountain.orientation,
                toggleName = "MuscleKingToggle"
            })
        else
            print("Muscle King Auto Farm disabled")
        end
    end
})

Tabs.AutoFarm:AddToggle("LegendToggle", {
    Title = "Enable Legend Auto Farm", 
    Default = false,
    Callback = function(state)
        if state then
            print("Legend Auto Farm enabled")
            startTeleporting({
                position = rocks.LegendRock.position,
                orientation = rocks.LegendRock.orientation,
                toggleName = "LegendToggle"
            })
        else
            print("Legend Auto Farm disabled")
        end
    end
})

Tabs.AutoFarm:AddToggle("MythicToggle", {
    Title = "Enable Mythic Auto Farm", 
    Default = false,
    Callback = function(state)
        if state then
            print("Mythic Auto Farm enabled")
            startTeleporting({
                position = rocks.MythicalRock.position,
                orientation = rocks.MythicalRock.orientation,
                toggleName = "MythicToggle"
            })
        else
            print("Mythic Auto Farm disabled")
        end
    end
})

-- Speed Input
Tabs.Main:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            character.Humanoid.WalkSpeed = speedValue
        end
    end
})

-- Size Input
Tabs.Main:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local changeSizeRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
            changeSizeRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

-- Jump Power Input
Tabs.Main:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        local jumpPowerValue = tonumber(value)
        if jumpPowerValue then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = jumpPowerValue
            end
        end
    end
})

-- Infinite Jump Toggle
Tabs.Main:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
    Callback = function(state)
        local UserInputService = game:GetService("UserInputService")
        if state then
            UserInputService.JumpRequest:Connect(function()
                character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end)
        end
    end
})

-- Notify that the GUI has been loaded
Fluent:Notify({
    Title = "Fluent",
    Content = "The GUI has been loaded successfully.",
    Duration = 5
})
