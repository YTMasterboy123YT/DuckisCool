local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Ducks Private Script " .. Fluent.Version,
    SubTitle = "by Duck",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
}

-- Main Tab
local MainTab = Tabs.Main

-- Function to perform a backflip
local function performBackflip()
    if character and character:FindFirstChild("Humanoid") then
        character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        character.Humanoid.JumpPower = 80
        wait(0.1)
        character.Humanoid.Sit = true

        wait(0.5) -- Reduced wait time before unsitting
        character.Humanoid.Sit = false

        for i = 1, 360 do
            wait(0.001) -- Faster turning speed
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame * CFrame.Angles(math.rad(19), 0, 0)
        end

        wait(0.2)
    end
end

-- Backflip Toggle
MainTab:AddToggle("BackflipToggle", {
    Title = "Enable Backflip",
    Default = false,
    Callback = function(state)
        if state then
            performBackflip()
        end
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Ducks Private Script",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
