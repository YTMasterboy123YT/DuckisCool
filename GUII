local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" })
}

local Options = Fluent.Options

-- Main Tab
do
    -- Infinite Jump Toggle
    local infiniteJumpToggle = Tabs.Main:AddToggle("InfiniteJumpToggle", { Title = "Infinite Jump", Default = false })
    infiniteJumpToggle:OnChanged(function()
        if infiniteJumpToggle.Value then
            local Players = game:GetService("Players")
            local UserInputService = game:GetService("UserInputService")
            local function enableInfiniteJump()
                for _, player in ipairs(Players:GetPlayers()) do
                    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        UserInputService.JumpRequest:Connect(function()
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end)
                    end
                end
            end
            enableInfiniteJump()
        end
    end)

    -- Set Size Input
    Tabs.Main:AddInput("SetSizeInput", {
        Title = "Set Size",
        Default = "2",
        Placeholder = "Enter size",
        Numeric = true,
        Finished = true,
        Callback = function(Value)
            local sizeValue = tonumber(Value)
            if sizeValue then
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
                changeSizeSpeedRemote:InvokeServer("changeSize", sizeValue)
            end
        end
    })

    -- Set Speed Input
    Tabs.Main:AddInput("SetSpeedInput", {
        Title = "Set Speed",
        Default = "200",
        Placeholder = "Enter speed",
        Numeric = true,
        Finished = true,
        Callback = function(Value)
            local speedValue = tonumber(Value)
            if speedValue then
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
                changeSizeSpeedRemote:InvokeServer("changeSpeed", speedValue)
            end
        end
    })

    -- NoClip Toggle
    local noClipToggle = Tabs.Main:AddToggle("NoClipToggle", { Title = "NoClip", Default = false })
    noClipToggle:OnChanged(function()
        local function setNoClip(character, value)
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not value
                end
            end
        end

        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                setNoClip(player.Character, noClipToggle.Value)
            end
        end
    end)

    -- Change Game Time Dropdown
    local timeDropdown = Tabs.Main:AddDropdown("ChangeGameTimeDropdown", {
        Title = "Change Game Time",
        Values = {"Morning", "Afternoon", "Night"},
        Default = 1
    })
    timeDropdown:OnChanged(function(Value)
        local timeOfDay = Value
        if timeOfDay == "Morning" then
            game.Lighting.ClockTime = 6
        elseif timeOfDay == "Afternoon" then
            game.Lighting.ClockTime = 16
        elseif timeOfDay == "Night" then
            game.Lighting.ClockTime = 0
        end
    end)

    -- Anti AFK Button
    Tabs.Main:AddButton({
        Title = "Anti AFK",
        Description = "Enable anti AFK",
        Callback = function()
            local player = game.Players.LocalPlayer
            while true do
                player.Idled:Wait()
                player:Move(Vector3.new(0, 0, 0))
                wait(1)
            end
        end
    })

    -- Player Chat Logger Button
    Tabs.Main:AddButton({
        Title = "Player Chat Logger",
        Description = "Log player chat messages",
        Callback = function()
            local Players = game:GetService("Players")

            local function onPlayerChatted(player, message)
                print(player.Name .. ": " .. message)
            end

            for _, player in pairs(Players:GetPlayers()) do
                player.Chatted:Connect(function(message)
                    onPlayerChatted(player, message)
                end)
            end

            Players.PlayerAdded:Connect(function(player)
                player.Chatted:Connect(function(message)
                    onPlayerChatted(player, message)
                end)
            end)
        end
    })
end

-- Killer Tab
do
    -- Add Killer-related features here
    -- Example: Add toggle for auto hit or other killer features
end

-- SaveManager and InterfaceManager setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Killer)
SaveManager:BuildConfigSection(Tabs.Killer)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
