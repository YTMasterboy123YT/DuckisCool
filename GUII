local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSizeSpeedRemote
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the GUI Window
local Window = Rayfield:CreateWindow({
    Name = "Ducks Private Script",
    LoadingTitle = "Ducks Private Suite",
    LoadingSubtitle = "by Masterboy123",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

-- Create the Main tab
local MainTab = Window:CreateTab("Main", 5100889067)

-- Function to set NoClip for a character
local function setNoClip(character, value)
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not value
        end
    end
end

-- Toggle for NoClip
local NoClipToggle = MainTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "ToggleNoClip",
    Callback = function(Value)
        local character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
        setNoClip(character, Value)
        if Value then
            print("NoClip enabled.")
        else
            print("NoClip disabled.")
            setNoClip(character, false)
        end
    end,
})

-- Function to enable Infinite Jump
local function enableInfiniteJump()
    local player = Players.LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        UserInputService.JumpRequest:Connect(function()
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end)
    end
end

-- Toggle for Infinite Jump
local InfiniteJumpToggle = MainTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "ToggleInfiniteJump",
    Callback = function(Value)
        if Value then
            print("Infinite Jump enabled.")
            enableInfiniteJump()
        else
            print("Infinite Jump disabled.")
            -- You may want to disconnect the jump connection here if necessary
        end
    end,
})

-- Speed Changer Input
local SpeedChangerInput = MainTab:CreateInput({
    Name = "SpeedChanger",
    PlaceholderText = "Input Speed Value",
    RemoveTextAfterFocusLost = true,
    Callback = function(Text)
        local speedValue = tonumber(Text)  -- Convert the input text to a number
        if speedValue then
            print("Speed changed to: " .. speedValue)
            changeSizeSpeedRemote:InvokeServer("changeSpeed", speedValue)
        else
            print("Please enter a valid number for speed.")
        end
    end,
})

-- Size Changer Input
local SizeChangerInput = MainTab:CreateInput({
    Name = "SizeChanger",
    PlaceholderText = "Input Size Value",
    RemoveTextAfterFocusLost = true,
    Callback = function(Text)
        local sizeValue = tonumber(Text)  -- Convert the input text to a number
        if sizeValue then
            print("Size changed to: " .. sizeValue)
            changeSizeSpeedRemote:InvokeServer("changeSize", sizeValue)
        else
            print("Please enter a valid number for size.")
        end
    end,
})

-- You can continue to add more features to the MainTab here as needed
