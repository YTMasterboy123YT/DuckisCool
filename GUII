local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark"
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
})

-- Main Tab
Tabs.Main:AddInput("SpeedInput", {
    Title = "Set Speed",
    Default = "16",
    Placeholder = "Enter Speed",
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
            changeSizeSpeedSpeedRemote:InvokeServer("changeSpeed", speedValue)
        end
    end
})

Tabs.Main:AddInput("SizeInput", {
    Title = "Set Size",
    Default = "1",
    Placeholder = "Enter Size",
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local changeSizeRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
            changeSizeRemote:InvokeServer("changeSize", sizeValue)
        end
    end
})

Tabs.Main:AddInput("JumpInput", {
    Title = "Set Jump Power",
    Default = "50",
    Placeholder = "Enter Jump Power",
    Callback = function(value)
        local jumpValue = tonumber(value)
        if jumpValue then
            local Players = game:GetService("Players")
            for _, player in ipairs(Players:GetPlayers()) do
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpPower = jumpValue
                end
            end
        end
    end
})

Tabs.Main:AddToggle("InfiniteJump", {
    Title = "Enable Infinite Jump",
    Default = false,
    Callback = function(value)
        local UserInputService = game:GetService("UserInputService")
        if value then
            UserInputService.JumpRequest:Connect(function()
                local player = game.Players.LocalPlayer
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        end
    end
})

Tabs.Main:AddToggle("NoClip", {
    Title = "Enable NoClip",
    Default = false,
    Callback = function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local function setNoClip(enabled)
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not enabled
                end
            end
        end

        setNoClip(value)
        player.CharacterAdded:Connect(function(newCharacter)
            character = newCharacter
            setNoClip(value)
        end)
    end
})

-- Killer Tab
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

_G.autoHitActive = false

local function autoHit()
    while _G.autoHitActive do
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
        wait(0.1)
    end
end

Tabs.Killer:AddToggle("Activate Auto Hit", {
    Title = "Enable Auto Hit",
    Default = false,
    Callback = function(value)
        _G.autoHitActive = value
        if value then
            spawn(autoHit)
        end
    end
})

-- Misc Tab
Tabs.Misc:AddDropdown("GameTime", {
    Title = "Select Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        setGameTime(value)  -- Assuming setGameTime function is defined
    end
})

Tabs.Misc:AddButton({
    Title = "Anti AFK",
    Callback = function()
        antiAFK()  -- Assuming antiAFK function is defined
    end
})

-- Final setup
Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- SaveManager setup (if needed)
SaveManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.AutoFarm)
SaveManager:BuildConfigSection(Tabs.AutoFarm)

SaveManager:LoadAutoloadConfig()
