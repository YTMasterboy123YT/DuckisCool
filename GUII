local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "skull" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "farm" })
}

-- Main Tab Scripts
Tabs.Main:AddButton({
    Title = "Auto Hit",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local function autoHit()
            while true do
                local punchTool = character:FindFirstChild("Punch")
                if punchTool and punchTool.Enabled then
                    punchTool:Activate()
                end
                wait(0.1)
            end
        end

        autoHit()
        player.CharacterAdded:Connect(function(newCharacter)
            character = newCharacter
            autoHit()
        end)
    end
})

Tabs.Main:AddButton({
    Title = "Set Tool Attributes",
    Callback = function()
        local player = game.Players.LocalPlayer
        local backpack = player:WaitForChild("Backpack")

        local function setToolAttributes(toolName, attributeType, value)
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                tool[attributeType].Value = value
            end
        end

        local toolsToSet = {
            {"Punch", "attackTime", 0.1},
            {"Ground Slam", "attackTime", 0.1},
            {"Stomp", "attackTime", 0.1},
            {"Handstands", "repTime", 0.1},
            {"Pushups", "repTime", 0.1},
            {"Weight", "repTime", 0.1},
            {"Situps", "repTime", 0.1}
        }

        for _, tool in ipairs(toolsToSet) do
            setToolAttributes(tool[1], tool[2], tool[3])
        end
    end
})

Tabs.Main:AddButton({
    Title = "Change Jump Power",
    Callback = function()
        local Players = game:GetService("Players")

        local function changeJumpPower(jumpPowerValue)
            for _, player in ipairs(Players:GetPlayers()) do
                local character = player.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.JumpPower = jumpPowerValue
                    end
                end
            end
        end

        changeJumpPower(100)
    end
})

Tabs.Main:AddButton({
    Title = "Size Script",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

        changeSizeSpeedRemote:InvokeServer("changeSize", 2)
    end
})

Tabs.Main:AddButton({
    Title = "Speed Script",
    Callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

        changeSizeSpeedRemote:InvokeServer("changeSpeed", 200)
    end
})

Tabs.Main:AddButton({
    Title = "Noclip",
    Callback = function()
        local Players = game:GetService("Players")

        local function setNoClip(character, value)
            for _, part in ipairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not value
                end
            end
        end

        for _, player in ipairs(Players:GetPlayers()) do
            local character = player.Character
            if character then
                setNoClip(character, true)
            end
        end
    end
})

Tabs.Main:AddButton({
    Title = "Change Game Time",
    Callback = function()
        local function setGameTime(timeOfDay)
            if timeOfDay == "Morning" then
                game.Lighting.ClockTime = 6
            elseif timeOfDay == "Afternoon" then
                game.Lighting.ClockTime = 16
            elseif timeOfDay == "Night" then
                game.Lighting.ClockTime = 0
            else
                print("Invalid time of day.")
            end
        end

        setGameTime("Morning")
    end
})

Tabs.Main:AddButton({
    Title = "Anti-AFK",
    Callback = function()
        local player = game.Players.LocalPlayer

        local function antiAFK()
            while true do
                player.Idled:Wait()
                player:Move(Vector3.new(0, 0, 0))
                wait(1)
            end
        end

        antiAFK()
    end
})

Tabs.Main:AddButton({
    Title = "Player Chat Logger",
    Callback = function()
        local Players = game:GetService("Players")

        local function onPlayerChatted(player, message)
            print(player.Name .. ": " .. message)
        end

        for _, player in pairs(Players:GetPlayers()) do
            player.Chatted:Connect(function(message)
                onPlayerChatted(player, message)
            end)
        end

        Players.PlayerAdded:Connect(function(player)
            player.Chatted:Connect(function(message)
                onPlayerChatted(player, message)
            end)
        end)
    end
})

Tabs.Main:AddButton({
    Title = "Graphics Quality Script",
    Callback = function()
        local UserSettings = UserSettings():GetService("UserGameSettings")

        UserSettings.GraphicsQuality = 1
        UserSettings:SetThirdPartyGraphicsQuality(1)

        local function setQuality()
            UserSettings.GraphicsQuality = 1
        end

        setQuality()

        UserSettings.Changed:Connect(function(property)
            if property == "GraphicsQuality" then
                setQuality()
            end
        end)
    end
})

Tabs.Main:AddButton({
    Title = "Infinite Jump",
    Callback = function()
        local Players = game:GetService("Players")
        local UserInputService = game:GetService("UserInputService")

        local function enableInfiniteJump()
            for _, player in ipairs(Players:GetPlayers()) do
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    UserInputService.JumpRequest:Connect(function()
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end)
                end
            end
        end

        enableInfiniteJump()
    end
})

-- Killer Tab Scripts
Tabs.Killer:AddButton({
    Title = "Teleport Players",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        _G.teleportPlayersActive = false

        local function teleportPlayers()
            while _G.teleportPlayersActive do
                wait(0.1)

                for _, otherPlayer in pairs(Players:GetPlayers()) do
                    if otherPlayer ~= LocalPlayer then
                        local targetCharacter = otherPlayer.Character
                        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                            targetCharacter:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                        end
                    end
                end
            end
        end

        LocalPlayer.Chatted:Connect(function(message)
            if message:lower() == "lol" then
                _G.teleportPlayersActive = true
                spawn(teleportPlayers)
            end
        end)
    end
})

Tabs.Killer:AddButton({
    Title = "Make Players Invisible",
    Callback = function()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        _G.invisibilityActive = false

        local function makePlayersInvisible()
            while _G.invisibilityActive do
                for _, otherPlayer in pairs(Players:GetPlayers()) do
                    if otherPlayer ~= LocalPlayer then
                        local targetCharacter = otherPlayer.Character
                        if targetCharacter then
                            for _, part in pairs(targetCharacter:GetChildren()) do
                                if part:IsA("BasePart") then
                                    part.Transparency = 1
                                elseif part:IsA("Accessory") then
                                    part.Handle.Transparency = 1
                                end
                            end

                            for _, descendant in pairs(targetCharacter:GetDescendants()) do
                                if descendant:IsA("BillboardGui") then
                                    descendant.Enabled = false
                                end
                            end
                        end
                    end
                end
                wait(0.1)
            end
        end

        LocalPlayer.Chatted:Connect(function(message)
            if message:lower() == "lol" then
                _G.invisibilityActive = true
                spawn(makePlayersInvisible)
            end
        end)
    end
})

Tabs.Killer:AddButton({
    Title = "No Kill List",
    Callback = function()
        -- Implement No Kill List Logic Here
    end
})

-- Auto Farm Tab Scripts
-- (No scripts assigned yet)

-- Save and Interface Manager Setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
