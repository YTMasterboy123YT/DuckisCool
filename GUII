local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

-- Auto Hit, Teleport, Invisibility
_G.autoHitActive = false
_G.teleportPlayersActive = false
_G.invisibilityActive = false

local function autoHit()
    while _G.autoHitActive do
        player.muscleEvent:FireServer("punch", "leftHand")
        player.muscleEvent:FireServer("punch", "rightHand")
        wait(0.1)
    end
end

local function teleportPlayers()
    while _G.teleportPlayersActive do
        wait(0.1)
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                local targetCharacter = otherPlayer.Character
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    targetCharacter:SetPrimaryPartCFrame(character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                end
            end
        end
    end
end

local function makePlayersInvisible()
    while _G.invisibilityActive do
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                local targetCharacter = otherPlayer.Character
                if targetCharacter then
                    for _, part in pairs(targetCharacter:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.Transparency = 1
                        elseif part:IsA("Accessory") then
                            part.Handle.Transparency = 1
                        end
                    end
                    for _, descendant in pairs(targetCharacter:GetDescendants()) do
                        if descendant:IsA("BillboardGui") then
                            descendant.Enabled = false
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    CombinedActions = Window:AddTab({ Title = "Combined Actions", Icon = "" })
}

-- Main Tab
local MainTab = Tabs.Main

-- Speed Input
MainTab:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            character.Humanoid.WalkSpeed = speedValue
        end
    end
})

-- Size Input
MainTab:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            character.HumanoidRootPart.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
        end
    end
})

-- Jump Input
MainTab:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        for _, p in ipairs(game.Players:GetPlayers()) do
            local humanoid = p.Character and p.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = tonumber(value)
            end
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = MainTab:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
})

infiniteJumpToggle:OnChanged(function()
    if infiniteJumpToggle.Value then
        local UserInputService = game:GetService("UserInputService")
        UserInputService.JumpRequest:Connect(function()
            character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end)
    end
end)

-- NoClip Toggle
local noClipToggle = MainTab:AddToggle("NoClipToggle", {
    Title = "Enable NoClip",
    Default = false,
})

noClipToggle:OnChanged(function()
    local function setNoClip(enabled)
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = not enabled
            end
        end
    end
    setNoClip(noClipToggle.Value)
end)

-- Killer Tab
local KillerTab = Tabs.Killer

-- Combined Actions Toggle
local combinedActionToggle = Tabs.CombinedActions:AddToggle("CombinedActionToggle", {
    Title = "Enable Combined Actions",
    Default = false,
})

combinedActionToggle:OnChanged(function()
    _G.autoHitActive = combinedActionToggle.Value
    _G.teleportPlayersActive = combinedActionToggle.Value
    _G.invisibilityActive = combinedActionToggle.Value
    
    if combinedActionToggle.Value then
        spawn(autoHit)
        spawn(teleportPlayers)
        spawn(makePlayersInvisible)
    end
end)

-- Misc Tab
local MiscTab = Tabs.Misc

-- Game Time Dropdown
MiscTab:AddDropdown("GameTimeDropdown", {
    Title = "Set Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        if value == "Morning" then
            game.Lighting.ClockTime = 6
        elseif value == "Afternoon" then
            game.Lighting.ClockTime = 16
        elseif value == "Night" then
            game.Lighting.ClockTime = 0
        end
    end
})

-- Anti AFK Toggle
local antiAFKToggle = MiscTab:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti-AFK",
    Default = false,
})

antiAFKToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    while antiAFKToggle.Value do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end)

-- Add any additional setup for SaveManager and InterfaceManager here
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(MiscTab)
SaveManager:BuildConfigSection(MiscTab)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
