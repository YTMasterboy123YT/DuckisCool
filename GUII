local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

-- Player setup
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local userInputService = game:GetService("UserInputService")

-- NoClip setup
local noclipEnabled = false

local function toggleNoClip()
    noclipEnabled = not noclipEnabled

    if noclipEnabled then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
        Notify("NoClip Activated", "", 3)
    else
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
        Notify("NoClip Deactivated", "", 3)
    end
end

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.N then
        toggleNoClip()
        Options.NoClip:SetValue(noclipEnabled) -- Sync GUI toggle with NoClip state
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    if noclipEnabled then
        character:Move(Vector3.new(0, 0, 0), false)
    end
end)

-- Speed input field
local InputSpeed = Tabs.Main:AddInput("Speed", {
    Title = "Speed",
    Default = "16", -- Default speed value
    Placeholder = "Enter speed value",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        print("Speed changed:", Value)
        changeSizeSpeedRemote:InvokeServer("changeSpeed", tonumber(Value))
    end
})

InputSpeed:OnChanged(function()
    print("Speed updated:", InputSpeed.Value)
end)

-- Size input field
local InputSize = Tabs.Main:AddInput("Size", {
    Title = "Size",
    Default = "10", -- Default size value
    Placeholder = "Enter size value",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        print("Size changed:", Value)
        changeSizeSpeedRemote:InvokeServer("changeSize", tonumber(Value))
    end
})

InputSize:OnChanged(function()
    print("Size updated:", InputSize.Value)
end)

-- NoClip toggle in GUI
Options.NoClip = Tabs.Main:AddToggle("NoClip", {
    Title = "Toggle NoClip",
    Default = false,
    Callback = function(Value)
        noclipEnabled = Value
        toggleNoClip() -- Activate or deactivate NoClip based on toggle
    end
})

-- MyToggle example
local Toggle = Tabs.Main:AddToggle("MyToggle", {
    Title = "Toggle",
    Default = false
})

Toggle:OnChanged(function(Value)
    print("Toggle changed:", Value)
end)

Options.MyToggle = Toggle -- Register toggle in Options
Options.MyToggle:SetValue(false) -- Set initial value
