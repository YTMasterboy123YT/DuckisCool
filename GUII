local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Functions
local function setGameTime(timeOfDay)
    if timeOfDay == "Morning" then
        game.Lighting.ClockTime = 6
    elseif timeOfDay == "Afternoon" then
        game.Lighting.ClockTime = 16
    elseif timeOfDay == "Night" then
        game.Lighting.ClockTime = 0
    else
        print("Invalid time of day.")
    end
end

local function changeJumpPower(jumpPowerValue)
    for _, player in ipairs(game.Players:GetPlayers()) do
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = jumpPowerValue
        end
    end
end

local function enableInfiniteJump()
    for _, player in ipairs(game.Players:GetPlayers()) do
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            UserInputService.JumpRequest:Connect(function()
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end)
        end
    end
end

local function setNoClip(enabled)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            part.CanCollide = not enabled
        end
    end
end

local function antiAFK()
    local player = game.Players.LocalPlayer
    while true do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- Main Tab
local MainTab = Tabs.Main

-- Speed Input
MainTab:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        changeSizeSpeedRemote:InvokeServer("changeSpeed", tonumber(value))
    end
})

-- Size Input
MainTab:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        changeSizeRemote:InvokeServer("changeSize", tonumber(value))
    end
})

-- Jump Input
MainTab:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        changeJumpPower(tonumber(value))
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = MainTab:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
})

infiniteJumpToggle:OnChanged(function()
    if infiniteJumpToggle.Value then
        enableInfiniteJump()
    end
end)

-- NoClip Toggle
local noClipToggle = MainTab:AddToggle("NoClipToggle", {
    Title = "Enable NoClip",
    Default = false,
})

noClipToggle:OnChanged(function()
    setNoClip(noClipToggle.Value)
end)

-- Killer Tab
local KillerTab = Tabs.Killer
KillerTab:AddParagraph({
    Title = "Coming Soon",
    Content = "Stay tuned for updates!"
})

-- Auto Farm
local AutoFarmTab = Tabs.AutoFarm
AutoFarmTab:AddParagraph({
    Title = "Coming Soon",
    Content = "Stay tuned for updates!"
})

-- Misc Tab
local MiscTab = Tabs.Misc

-- Game Time Dropdown
MiscTab:AddDropdown("GameTimeDropdown", {
    Title = "Set Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        setGameTime(value)
    end
})

-- Anti AFK Toggle
local antiAFKToggle = MiscTab:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti-AFK",
    Default = false,
})

antiAFKToggle:OnChanged(function()
    if antiAFKToggle.Value then
        antiAFK()
    end
end)

-- Add any additional setup for SaveManager and InterfaceManager here
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(MiscTab)
SaveManager:BuildConfigSection(MiscTab)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
