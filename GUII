local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the main window
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Define the tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" })
})

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Save Manager Configuration
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

-- Build Interface Sections
SaveManager:BuildConfigSection(Tabs.Main)

-- Main Tab Features
local Options = Fluent.Options

-- Infinite Jump Toggle
local infiniteJumpToggle = Tabs.Main:AddToggle("InfiniteJump", { Title = "Enable Infinite Jump", Default = false })
infiniteJumpToggle:OnChanged(function()
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local LocalPlayer = Players.LocalPlayer

    if infiniteJumpToggle.Value then
        UserInputService.JumpRequest:Connect(function()
            if LocalPlayer.Character then
                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end)

-- Anti AFK
local antiAFKButton = Tabs.Main:AddButton({
    Title = "Anti AFK",
    Description = "Prevents you from being marked as AFK",
    Callback = function()
        local player = game.Players.LocalPlayer
        while true do
            player.Idled:Wait()
            player:Move(Vector3.new(0, 0, 0))
            wait(1)
        end
    end
})

-- Player Chat Log
local playerChatToggle = Tabs.Main:AddToggle("PlayerChat", { Title = "Enable Player Chat Log", Default = false })
playerChatToggle:OnChanged(function()
    local Players = game:GetService("Players")

    local function onPlayerChatted(player, message)
        print(player.Name .. ": " .. message)
    end

    if playerChatToggle.Value then
        for _, player in pairs(Players:GetPlayers()) do
            player.Chatted:Connect(function(message)
                onPlayerChatted(player, message)
            end)
        end

        Players.PlayerAdded:Connect(function(player)
            player.Chatted:Connect(function(message)
                onPlayerChatted(player, message)
            end)
        end)
    end
end)

-- Size Input
Tabs.Main:AddInput("SizeInput", {
    Title = "Set Size",
    Default = "2",
    Placeholder = "Enter size value",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
        changeSizeSpeedRemote:InvokeServer("changeSize", tonumber(value))
    end
})

-- Speed Input
Tabs.Main:AddInput("SpeedInput", {
    Title = "Set Speed",
    Default = "200",
    Placeholder = "Enter speed value",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local changeSizeSpeedRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote
        changeSizeSpeedRemote:InvokeServer("changeSpeed", tonumber(value))
    end
})

-- Killer Tab Features
local toggleAutoHit = Tabs.Killer:AddToggle("AutoHit", { Title = "Enable Auto Hit", Default = false })
toggleAutoHit:OnChanged(function()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    if toggleAutoHit.Value then
        local function autoHit()
            while toggleAutoHit.Value do
                local equippedTool = character:FindFirstChildOfClass("Tool")
                if equippedTool and equippedTool.Enabled then
                    equippedTool:Activate()
                end
                wait(0.1)
            end
        end
        autoHit()
    end
end)

-- Teleport Players Toggle
local toggleTeleportPlayers = Tabs.Killer:AddToggle("TeleportPlayers", { Title = "Enable Teleport Players", Default = false })
toggleTeleportPlayers:OnChanged(function()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    if toggleTeleportPlayers.Value then
        while true do
            wait(0.1)
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                if otherPlayer ~= LocalPlayer then
                    local targetCharacter = otherPlayer.Character
                    if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                        targetCharacter:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
                    end
                end
            end
        end
    end
end)

-- Invisibility Toggle
local toggleInvisibility = Tabs.Killer:AddToggle("Invisibility", { Title = "Enable Invisibility", Default = false })
toggleInvisibility:OnChanged(function()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    if toggleInvisibility.Value then
        while true do
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                if otherPlayer ~= LocalPlayer then
                    local targetCharacter = otherPlayer.Character
                    if targetCharacter then
                        for _, part in pairs(targetCharacter:GetChildren()) do
                            if part:IsA("BasePart") then
                                part.Transparency = 1
                            elseif part:IsA("Accessory") then
                                part.Handle.Transparency = 1
                            end
                        end
                        for _, descendant in pairs(targetCharacter:GetDescendants()) do
                            if descendant:IsA("BillboardGui") then
                                descendant.Enabled = false
                            end
                        end
                    end
                end
            end
            wait(0.1)
        end
    end
end)

-- Auto Farm Tab Features (Placeholder for future features)
Tabs.AutoFarm:AddParagraph({
    Title = "Auto Farm Features",
    Content = "Features coming soon!"
})

-- Final Configuration and Notification
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

-- Build Interface Sections for the remaining tabs
SaveManager:BuildConfigSection(Tabs.Main)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
