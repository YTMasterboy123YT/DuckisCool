local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

local tools = {
    {name = "Punch", type = "attackTime"},
    {name = "Ground Slam", type = "attackTime"},
    {name = "Stomp", type = "attackTime"},
    {name = "Handstands", type = "repTime"},
    {name = "Pushups", type = "repTime"},
    {name = "Weight", type = "repTime"},
    {name = "Situps", type = "repTime"}
}

local isAutoHitEnabled = false
local isInfiniteJumpEnabled = false
local isNoClipEnabled = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local changeSizeRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

-- Set tool properties
local function setToolProperties()
    for _, toolInfo in pairs(tools) do
        local tool = backpack:FindFirstChild(toolInfo.name)
        if tool then
            local cooldown = tool:FindFirstChild(toolInfo.type) 
            if cooldown and cooldown:IsA("NumberValue") then
                cooldown.Value = 0.1
            end
        end
    end
end

-- Auto hit function
local function autoHit()
    while isAutoHitEnabled do
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Enabled then
            equippedTool:Activate()
        end
        wait(0.1)
    end
end

-- Enable infinite jump function
local function enableInfiniteJump()
    local UserInputService = game:GetService("UserInputService")
    UserInputService.JumpRequest:Connect(function()
        if isInfiniteJumpEnabled then
            character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end)
end

-- NoClip function
local function toggleNoClip()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    isNoClipEnabled = not isNoClipEnabled
    humanoid:ChangeState(isNoClipEnabled and Enum.HumanoidStateType.Physics or Enum.HumanoidStateType.GettingUp)

    while isNoClipEnabled do
        character.HumanoidRootPart.CanCollide = false
        wait()
    end

    character.HumanoidRootPart.CanCollide = true
end

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- Main Tab
local MainTab = Tabs.Main

-- Inputs
MainTab:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            player.Character.Humanoid.WalkSpeed = speedValue
        end
    end
})

MainTab:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            changeSizeRemote:InvokeServer("changeSize", sizeValue)
            character.HumanoidRootPart.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
        end
    end
})

MainTab:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        for _, p in ipairs(game.Players:GetPlayers()) do
            local humanoid = p.Character and p.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = tonumber(value)
            end
        end
    end
})

-- Toggles
local infiniteJumpToggle = MainTab:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
})

infiniteJumpToggle:OnChanged(function()
    isInfiniteJumpEnabled = infiniteJumpToggle.Value
    if isInfiniteJumpEnabled then
        enableInfiniteJump()
    end
end)

-- NoClip Toggle
local noClipToggle = MainTab:AddToggle("NoClipToggle", {
    Title = "Enable NoClip",
    Default = false,
})

noClipToggle:OnChanged(function()
    if noClipToggle.Value then
        toggleNoClip()
    else
        isNoClipEnabled = false
        character.HumanoidRootPart.CanCollide = true
    end
end)

-- Killer Tab
local KillerTab = Tabs.Killer

-- Auto Hit Toggle
local autoHitToggle = KillerTab:AddToggle("AutoHitToggle", {
    Title = "Enable Auto Hit",
    Default = false,
})

autoHitToggle:OnChanged(function()
    isAutoHitEnabled = autoHitToggle.Value
    if isAutoHitEnabled then
        autoHit()
    end
end)

-- Auto Farm Tab (add your functionality here)
local AutoFarmTab = Tabs.AutoFarm

AutoFarmTab:AddToggle("AutoFarmToggle", {
    Title = "Enable Auto Farm",
    Default = false,
})

-- Misc Tab
local MiscTab = Tabs.Misc

-- Game Time Dropdown
MiscTab:AddDropdown("GameTimeDropdown", {
    Title = "Set Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        if value == "Morning" then
            game.Lighting.ClockTime = 6
        elseif value == "Afternoon" then
            game.Lighting.ClockTime = 16
        elseif value == "Night" then
            game.Lighting.ClockTime = 0
        end
    end
})

-- Anti AFK Toggle
local antiAFKToggle = MiscTab:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti-AFK",
    Default = false,
})

antiAFKToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    while antiAFKToggle.Value do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end)

-- Mobile Toggle Button
local playerGui = player:WaitForChild("PlayerGui")
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 100, 0, 50)
toggleButton.Position = UDim2.new(0.5, -50, 0.9, 0) -- Positioned below the center
toggleButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
toggleButton.BorderColor3 = Color3.fromRGB(110, 90, 130)
toggleButton.BorderSizePixel = 2
toggleButton.Text = "Toggle GUI"
toggleButton.Parent = playerGui

local circle = Instance.new("UICorner")
circle.CornerRadius = UDim.new(0.5, 0)
circle.Parent = toggleButton

toggleButton.MouseButton1Click:Connect(function()
    Window.Visible = not Window.Visible
end)

-- SaveManager and InterfaceManager Setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(MiscTab)
SaveManager:BuildConfigSection(MiscTab)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
