local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

local tools = {
    {name = "Punch", type = "attackTime"},
    {name = "Ground Slam", type = "attackTime"},
    {name = "Stomp", type = "attackTime"},
    {name = "Handstands", type = "repTime"},
    {name = "Pushups", type = "repTime"},
    {name = "Weight", type = "repTime"},
    {name = "Situps", type = "repTime"}
}

local isAutoHitEnabled = false
local isInfiniteJumpEnabled = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local changeSizeRemote = ReplicatedStorage.rEvents.changeSpeedSizeRemote

local function setToolProperties()
    for _, toolInfo in pairs(tools) do
        local tool = backpack:FindFirstChild(toolInfo.name)
        if tool then
            local cooldown = tool:FindFirstChild(toolInfo.type) 
            if cooldown and cooldown:IsA("NumberValue") then
                cooldown.Value = 0.1
            end
        end
    end
end

local function autoHit()
    while isAutoHitEnabled do
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Enabled then
            equippedTool:Activate()
        end
        wait(0.1)
    end
end

-- Enable Infinite Jump
local function enableInfiniteJump()
    local UserInputService = game:GetService("UserInputService")
    for _, player in ipairs(game.Players:GetPlayers()) do
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            UserInputService.JumpRequest:Connect(function()
                if isInfiniteJumpEnabled then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        end
    end
end

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- Main Tab
local MainTab = Tabs.Main

-- Speed Input
MainTab:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
        end
    end
})

-- Size Input
MainTab:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            changeSizeRemote:InvokeServer("changeSize", sizeValue)
            character.HumanoidRootPart.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
        end
    end
})

-- Jump Input
MainTab:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        for _, player in ipairs(game.Players:GetPlayers()) do
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = tonumber(value)
            end
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = MainTab:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
})

infiniteJumpToggle:OnChanged(function()
    isInfiniteJumpEnabled = infiniteJumpToggle.Value
    if isInfiniteJumpEnabled then
        enableInfiniteJump()  -- Enable infinite jump when the toggle is on
    end
end)

-- Killer Tab
local KillerTab = Tabs.Killer

-- Auto Hit Toggle
local autoHitToggle = KillerTab:AddToggle("AutoHitToggle", {
    Title = "Enable Auto Hit",
    Default = false,
})

autoHitToggle:OnChanged(function()
    isAutoHitEnabled = autoHitToggle.Value
    if isAutoHitEnabled then
        autoHit()  -- Start auto-hitting when the toggle is enabled
    end
end)

-- Set Tool Properties
setToolProperties()

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    backpack = player:WaitForChild("Backpack")
    setToolProperties()
end)

-- Auto Farm Tab
local AutoFarmTab = Tabs.AutoFarm

-- Muscle King Machine Toggle
local muscleKingToggle = AutoFarmTab:AddToggle("MuscleKingToggle", {
    Title = "Use Muscle King Machine",
    Default = false,
})

muscleKingToggle:OnChanged(function()
    while muscleKingToggle.Value do
        local replicatedStorage = game:GetService("ReplicatedStorage")
        local machineInteractRemote = replicatedStorage.rEvents.machineInteractRemote
        local machine = workspace.machinesFolder["Muscle King Mountain"].interactSeat

        if machine then
            machineInteractRemote:InvokeServer("useMachine", machine)
            wait(1) -- Adjust the wait time as needed to avoid spamming
        else
            Fluent:Notify({
                Title = "Error",
                Content = "Machine not found!",
                Duration = 5
            })
            break -- Exit loop if the machine is not found
        end
    end
end)

-- Misc Tab
local MiscTab = Tabs.Misc

-- Game Time Dropdown
MiscTab:AddDropdown("GameTimeDropdown", {
    Title = "Set Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        if value == "Morning" then
            game.Lighting.ClockTime = 6
        elseif value == "Afternoon" then
            game.Lighting.ClockTime = 16
        elseif value == "Night" then
            game.Lighting.ClockTime = 0
        end
    end
})

-- Anti AFK Toggle
local antiAFKToggle = MiscTab:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti-AFK",
    Default = false,
})

antiAFKToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    while antiAFKToggle.Value do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end)

-- SaveManager and InterfaceManager Setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(MiscTab)
SaveManager:BuildConfigSection(MiscTab)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
