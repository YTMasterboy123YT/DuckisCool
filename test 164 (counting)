local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

local tools = {
    {name = "Punch", type = "attackTime"},
}

local autoKillActive = false
local teleportPlayersActive = false
local turnAccessoriesInvisibleActive = false

local function setToolProperties()
    for _, toolInfo in pairs(tools) do
        local tool = backpack:FindFirstChild(toolInfo.name)
        if tool then
            local cooldown = tool:FindFirstChild(toolInfo.type)
            if cooldown and cooldown:IsA("NumberValue") then
                cooldown.Value = 0.1
            end
        end
    end
end

local function autoHit()
    while autoKillActive do
        local equippedTool = character:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Enabled then
            equippedTool:Activate()
            wait(0.1) -- Wait between hits
        end
        wait(0.1) -- Additional wait to prevent overwhelming the server
    end
end

local function anchorCharacter(character, anchor)
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            part.Anchored = anchor
        end
    end
end

local function teleportHeads()
    local localLeftHand = character:FindFirstChild("LeftHand")
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                local head = targetCharacter:FindFirstChild("Head")
                anchorCharacter(targetCharacter, true)
                if head and localLeftHand then
                    local handPosition = localLeftHand.Position
                    head.CFrame = CFrame.new(handPosition + Vector3.new(0, 2, 0))
                end
            end
        end
    end
end

local function turnAccessoriesInvisible()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                for _, accessory in pairs(targetCharacter:GetChildren()) do
                    if accessory:IsA("Accessory") and accessory:FindFirstChild("Handle") then
                        accessory.Handle.Transparency = 1
                    end
                end
            end
        end
    end
end

local function restoreAccessories()
    for _, otherPlayer in pairs(game.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                for _, accessory in pairs(targetCharacter:GetChildren()) do
                    if accessory:IsA("Accessory") and accessory:FindFirstChild("Handle") then
                        accessory.Handle.Transparency = 0
                    end
                end
            end
        end
    end
end

-- Connect to character addition
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    backpack = player:WaitForChild("Backpack")
    setToolProperties()
    if autoKillActive then
        autoHit() -- Restart auto hitting if it was active
    end
end)

-- Create Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Killer = Window:AddTab({ Title = "Killer", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

-- Main Tab
local MainTab = Tabs.Main

-- Speed Input
MainTab:AddInput("SpeedInput", {
    Title = "Change Speed",
    Placeholder = "Enter speed value",
    Numeric = true,
    Callback = function(value)
        local speedValue = tonumber(value)
        if speedValue then
            character.Humanoid.WalkSpeed = speedValue
        end
    end
})

-- Size Input
MainTab:AddInput("SizeInput", {
    Title = "Change Size",
    Placeholder = "Enter size value",
    Numeric = true,
    Callback = function(value)
        local sizeValue = tonumber(value)
        if sizeValue then
            character.HumanoidRootPart.Size = Vector3.new(sizeValue, sizeValue, sizeValue)
        end
    end
})

-- Jump Input
MainTab:AddInput("JumpPowerInput", {
    Title = "Change Jump Power",
    Placeholder = "Enter jump power value",
    Numeric = true,
    Callback = function(value)
        character.Humanoid.JumpPower = tonumber(value)
    end
})

-- Infinite Jump Toggle
local infiniteJumpToggle = MainTab:AddToggle("InfiniteJumpToggle", {
    Title = "Enable Infinite Jump",
    Default = false,
})

infiniteJumpToggle:OnChanged(function()
    local UserInputService = game:GetService("UserInputService")
    if infiniteJumpToggle.Value then
        UserInputService.JumpRequest:Connect(function()
            if infiniteJumpToggle.Value then
                character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    end
end)

-- Killer Tab
local KillerTab = Tabs.Killer

-- Auto Hit Toggle
local autoHitToggle = KillerTab:AddToggle("AutoHitToggle", {
    Title = "Enable Auto Kill",
    Default = false,
})

autoHitToggle:OnChanged(function()
    autoKillActive = autoHitToggle.Value
    if autoKillActive then
        autoHit() -- Start auto hitting when enabled
    end
end)

-- Teleport Heads Toggle
local teleportPlayersToggle = KillerTab:AddToggle("TeleportPlayersToggle", {
    Title = "Enable Teleport Heads",
    Default = false,
})

teleportPlayersToggle:OnChanged(function()
    teleportPlayersActive = teleportPlayersToggle.Value
    if teleportPlayersActive then
        teleportHeads() -- Start teleporting heads when enabled
    end
end)

-- Turn Accessories Invisible Toggle
local turnAccessoriesInvisibleToggle = KillerTab:AddToggle("TurnAccessoriesInvisibleToggle", {
    Title = "Enable Turn Accessories Invisible",
    Default = false,
})

turnAccessoriesInvisibleToggle:OnChanged(function()
    turnAccessoriesInvisibleActive = turnAccessoriesInvisibleToggle.Value
    if turnAccessoriesInvisibleActive then
        turnAccessoriesInvisible() -- Make accessories invisible when enabled
    else
        restoreAccessories() -- Restore visibility when disabled
    end
end)

-- Auto Farm Tab
local AutoFarmTab = Tabs.AutoFarm

-- Misc Tab
local MiscTab = Tabs.Misc

-- Game Time Dropdown
MiscTab:AddDropdown("GameTimeDropdown", {
    Title = "Set Game Time",
    Values = {"Morning", "Afternoon", "Night"},
    Default = 1,
    Callback = function(value)
        if value == "Morning" then
            game.Lighting.ClockTime = 6
        elseif value == "Afternoon" then
            game.Lighting.ClockTime = 16
        elseif value == "Night" then
            game.Lighting.ClockTime = 0
        end
    end
end)

-- Anti AFK Toggle
local antiAFKToggle = MiscTab:AddToggle("AntiAFKToggle", {
    Title = "Enable Anti-AFK",
    Default = false,
})

antiAFKToggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    while antiAFKToggle.Value do
        player.Idled:Wait()
        player:Move(Vector3.new(0, 0, 0))
        wait(1)
    end
end)

-- Set Tool Properties
setToolProperties()

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
