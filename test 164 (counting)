local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

local autoHitActive = false
local teleportPlayersActive = false
local turnAccessoriesInvisibleActive = false

local function autoHit()
    while autoHitActive do
        LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
        LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
        wait(0.1) -- Adjust the delay as needed
    end
end

local function anchorCharacter(character, anchor)
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            part.Anchored = anchor
        end
    end
end

local function teleportHeads()
    local localLeftHand = LocalPlayer.Character:FindFirstChild("LeftHand")
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= LocalPlayer then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                local head = targetCharacter:FindFirstChild("Head")
                anchorCharacter(targetCharacter, true)
                if head and localLeftHand then
                    local handPosition = localLeftHand.Position
                    head.CFrame = CFrame.new(handPosition + Vector3.new(0, 2, 0))
                end
            end
        end
    end
end

local function turnAccessoriesInvisible()
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= LocalPlayer then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                for _, accessory in pairs(targetCharacter:GetChildren()) do
                    if accessory:IsA("Accessory") and accessory:FindFirstChild("Handle") then
                        accessory.Handle.Transparency = 1
                    end
                end
            end
        end
    end
end

local function restoreAccessories()
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= LocalPlayer then
            local targetCharacter = otherPlayer.Character
            if targetCharacter then
                for _, accessory in pairs(targetCharacter:GetChildren()) do
                    if accessory:IsA("Accessory") and accessory:FindFirstChild("Handle") then
                        accessory.Handle.Transparency = 0
                    end
                end
            end
        end
    end
end

RunService.Heartbeat:Connect(function()
    if autoHitActive then autoHit() end
    if teleportPlayersActive then teleportHeads() end
    if turnAccessoriesInvisibleActive then turnAccessoriesInvisible() end
end)

-- Create Killer Tab
local Tabs = {
    Killer = Window:AddTab({ Title = "Killer", Icon = "" })
}

-- Killer Tab Toggle for Auto Hit
local autoHitToggle = Tabs.Killer:AddToggle("AutoHitToggle", {
    Title = "Enable Auto Hit",
    Default = false,
})

autoHitToggle:OnChanged(function()
    autoHitActive = autoHitToggle.Value
    if autoHitActive then
        spawn(autoHit) -- Start auto-hitting when the toggle is enabled
    else
        restoreAccessories() -- Restore accessories when toggled off
    end
end)

-- Killer Tab Toggle for Teleport Heads
local teleportToggle = Tabs.Killer:AddToggle("TeleportHeadsToggle", {
    Title = "Enable Teleport Heads",
    Default = false,
})

teleportToggle:OnChanged(function()
    teleportPlayersActive = teleportToggle.Value
end)

-- Killer Tab Toggle for Invisibility
local invisibilityToggle = Tabs.Killer:AddToggle("InvisibilityToggle", {
    Title = "Enable Invisibility",
    Default = false,
})

invisibilityToggle:OnChanged(function()
    turnAccessoriesInvisibleActive = invisibilityToggle.Value
    if not turnAccessoriesInvisibleActive then
        restoreAccessories() -- Restore accessories when toggled off
    end
end)

-- SaveManager and InterfaceManager Setup
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Killer)
SaveManager:BuildConfigSection(Tabs.Killer)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The Killer features have been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
